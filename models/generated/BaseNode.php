<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class BaseNode extends Doctrine_Record
{

  public function setTableDefinition()
  {
    $this->setTableName('node');
    $this->hasColumn('nid', 'integer', 4, array (
  'primary' => true,
  'autoincrement' => true,
  'notnull' => true,
  'unsigned' => 1,
));

    $this->hasColumn('vid', 'integer', 4, array (
  'default' => 0,
  'notnull' => true,
  'unsigned' => 1,
));

    $this->hasColumn('type', 'string', 32, array (
  'notnull' => true,
));

    $this->hasColumn('language', 'string', 12, array (
  'notnull' => true,
));

    $this->hasColumn('title', 'string', 255, array (
  'notnull' => true,
));

    $this->hasColumn('uid', 'integer', 4, array (
  'default' => 0,
  'notnull' => true,
));

    $this->hasColumn('status', 'integer', 4, array (
  'default' => 1,
  'notnull' => true,
));

    $this->hasColumn('created', 'integer', 4, array (
  'default' => 0,
  'notnull' => true,
));

    $this->hasColumn('changed', 'integer', 4, array (
  'default' => 0,
  'notnull' => true,
));

    $this->hasColumn('comment', 'integer', 4, array (
  'default' => 0,
  'notnull' => true,
));

    $this->hasColumn('promote', 'integer', 4, array (
  'default' => 0,
  'notnull' => true,
));

    $this->hasColumn('moderate', 'integer', 4, array (
  'default' => 0,
  'notnull' => true,
));

    $this->hasColumn('sticky', 'integer', 4, array (
  'default' => 0,
  'notnull' => true,
));

    $this->hasColumn('tnid', 'integer', 4, array (
  'default' => 0,
  'notnull' => true,
  'unsigned' => 1,
));
    $this->hasColumn('translate', 'integer', 4, array (
  'default' => 0,
  'notnull' => true,
));
  }

  public function setUp()
  {
    $this->hasOne('NodeType as Type', array('local' => 'type',
                                            'foreign' => 'type'));

    $this->hasOne('User', array('local' => 'uid',
                                'foreign' => 'uid'));

    $this->hasOne('Vocabulary', array('local' => 'vid',
                                      'foreign' => 'vid'));

    $this->hasMany('Comment as Comments', array('local' => 'nid',
                                                'foreign' => 'nid'));

    $this->hasMany('History', array('local' => 'nid',
                                    'foreign' => 'nid'));

    $this->hasMany('NodeAccess as Access', array('local' => 'nid',
                                                 'foreign' => 'nid'));

    $this->hasMany('NodeCounter as Counters', array('local' => 'nid',
                                                    'foreign' => 'nid'));

    $this->hasMany('NodeRevision as Revisions', array('local' => 'nid',
                                                      'foreign' => 'nid'));

    $this->hasMany('NodeCommentStatistic as CommentStatistics', array('local' => 'nid',
                                                                      'foreign' => 'nid'));

    $this->hasMany('TermData as Terms', array('refClass' => 'TermNode',
                                              'local' => 'nid',
                                              'foreign' => 'nid'));

    $this->hasMany('TermNode as TermNodes', array('local' => 'nid',
                                                  'foreign' => 'nid'));
  }

}