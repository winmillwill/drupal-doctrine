<?php

/**
 * @file
 * Installation functions for Doctrine ORM module.
 */

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Tools\DisconnectedClassMetadataFactory;
use Doctrine\ORM\Tools\EntityGenerator;
use Doctrine\ORM\Mapping\ClassMetadataFactory;
use Doctrine\ORM\Tools\Setup;
use Doctrine\ORM\Mapping\Driver\DatabaseDriver;
use Drupal\doctrine\Schema\SchemaDriver;

define('DOCTRINE_OUTPUT_DIRECTORY', realpath(__DIR__ . '../../..') . DIRECTORY_SEPARATOR . 'lib');

/**
 * Implements hook_install().
 */
function entity_install() {
  // Ensure translations don't break during installation.
  $t = get_t();

  $container = drupal_container();

  $connection = $container->get('doctrine.dbal.connection');
  $schemaManager = $container->get('doctrine.dbal.schema');

  $configuration = Setup::createConfiguration();
  $configuration->setMetadataDriverImpl(new SchemaDriver($schemaManager));
  $configuration->setProxyDir(variable_get('file_temporary_path', file_directory_temp()));

  $manager = EntityManager::create($connection, $configuration);
  $cmf = new DisconnectedClassMetadataFactory();
  $cmf->setEntityManager($manager);
  $metadatas = $cmf->getAllMetadata();

  if (count($metadatas)) {
    // Creates EntityGenerator.
    $entityGenerator = new EntityGenerator();

    $entityGenerator->setGenerateAnnotations(TRUE);
    $entityGenerator->setGenerateStubMethods(TRUE);
    $entityGenerator->setFieldVisibility('protected');
    $entityGenerator->setRegenerateEntityIfExists(TRUE);
    $entityGenerator->setUpdateEntityIfExists(TRUE);
    $entityGenerator->setBackupExisting(FALSE);
    $entityGenerator->setNumSpaces(2);

    // Generates Entities.
    $entityGenerator->generate($metadatas, DOCTRINE_OUTPUT_DIRECTORY);

    drupal_set_message($t('Entity classes generated to "<info>!path</info>"', array('!path' => DOCTRINE_OUTPUT_DIRECTORY)));
  }

  $cmf = new ClassMetadataFactory();
  $cmf->setEntityManager(doctrine());
  $metadatas = $cmf->getAllMetadata();

  if (count($metadatas)) {
    // Generates Proxies.
    doctrine()->getProxyFactory()->generateProxyClasses($metadatas);

    drupal_set_message($t('Proxy classes generated to "<info>!path</info>"', array('!path' => doctrine()->getConfiguration()->getProxyDir())));
  }
}

/**
 * Implements hook_requirements().
 */
function entity_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  if ($phase == 'install' || $phase == 'update') {
    if (!is_writable(DOCTRINE_OUTPUT_DIRECTORY)) {
      $requirements['doctrine_writable'] = array(
        'title' => $t('Doctrine'),
        'value' => $t('Not writable'),
        'description' => $t('The directory %directory is not writable.', array('%directory' => DOCTRINE_OUTPUT_DIRECTORY)),
        'severity' => REQUIREMENT_ERROR
      );
    }
  }

  return $requirements;
}
